MOV R0, #1
LSL R0, R0, 8 // MOV R0, #265 // op1
MOV R1, R0   // MOV R1, #5 // op2_shifted
MOV R3, #0 // sum
CMP R0, #0 // while(op1 != 0)
JEQ 8 // jump to end of program if op1 = 0
MOV R2, R0 // temp variable for op1 (AND modifies register)
AND R2, #1 // if(op1 & 1)
JEQ 2 // // if does not fulfill conditions, skip past the next line (PC = PC + 2)
ADD R3, R1 // sum = sum + op2_shifted
LSL R1, R1, #1
LSR R0, R0, #1
JMP -8 // loop back
